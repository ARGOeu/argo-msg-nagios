#!/usr/bin/perl
#
# Daemon which gathers WLCG Monitoring WG compatible I<metricOutput>
# messages from messaging system, translates them to Nagios passive checks and
# puts passive checks to dir based queue.
# Copyright (c) 2009 Emir Imamagic
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use Net::STOMP::Client;
use Getopt::Long;
use Config::General;
use POSIX qw(setsid);
use GridMon::sgutils qw(%ERRORS);
use Data::Dumper;
use Sys::Syslog;

# Standard variables used in Nagios::Plugin constructor
use constant PROGNAME => 'msg-to-queue';
use constant VERSION => '1.0';
use constant USAGE => "usage: $0 --prefix I<destination prefix> [ -v ] [ -d ] [ --dir I<qdirectory> ]
  [ --broker-cache I<FILENAME> ] [ --broker-uri I<HOSTNAME> ] [ --pid-file I<HOSTNAME> ] 
  [ --config I<file> ]\n";

sub report ($$$) {
    my($daemon, $priority, $message) = @_;

    $message =~ s/\s+$//;
    if ($daemon) {
	syslog($priority, $message);
    } else {
	print("$message\n");
    }
}

sub connectToMSG {
    my $msg_broker_param = shift || return;
    my $msgHandlers = shift || return;
    my $daemon = shift;
    my $verbose = shift;
    my $broker;

    eval {
        $broker = Net::STOMP::Client->new(%$msg_broker_param);
	$broker->message_callback(sub { return(1) });
    };
    if ($@) {
	report($daemon, "err", "Error creating Net::STOMP::Client object: $@");
	return();
    }
    eval {
	$broker->connect();
    };
    if ($@) {
	report($daemon, "err", "Error connecting to broker: $@");
	return();
    }
    foreach my $topic (keys %{$msgHandlers}) {
	my $params = $msgHandlers->{$topic}->{TOPIC_PARAMS} || {};
	$params->{destination} = $topic;
	
	eval {
	    $broker->subscribe(%$params);
	};
	if ($@) {
	    report($daemon, "err", "Error subscribing to $topic: $@");
	    next;
	}
	if ($verbose) {
	    report($daemon, "notice", "Subscribed to $topic");
	}
    }

    return($broker);
}

sub disconnect {
    my $broker = shift || return;
    my $msgHandlers = shift || {};
    my $daemon = shift;
    my $verbose = shift;
    my $unsubscribe = shift;

    return unless $broker;
    # unsubscribe if possible
    if ($unsubscribe) {
	foreach my $topic (keys %{$msgHandlers}) {
	    my $params = $msgHandlers->{$topic}->{TOPIC_PARAMS} || {};
	    $params->{destination} = $topic;
	    eval {
		$broker->unsubscribe(%$params);
	    };
	    if ($@) {
		report($daemon, "err", "Error unsubscribing from topic $topic: $@");
		next;
	    }
	}
    }
    # disconnect
    eval {
	$broker->disconnect();
    };
    if ($@) {
	report($daemon, "err", "Error disconnecting from broker: $@");
	return;
    }
}

sub loadMsgHandler {
    my $msgHndl = shift;
    my $msgHndlOut = shift;
    my $daemon = shift;
    my $verbose = shift;

    if (! $msgHndl->{TOPIC} || ! $msgHndl->{HANDLER}) {
	report($daemon, "err", "Incorrect config entry found. Missing TOPIC and/or HANDLER variable in entry: " . Dumper($msgHndl));
        return undef;
    }
    
    eval "require $msgHndl->{HANDLER};";
    if ($@) {
	report($daemon, "err", "Error loading MSG Handler class: $@");
        return undef;
    }
    eval {$msgHndlOut->{HANDLER} = new {$msgHndl->{HANDLER}}($msgHndl->{HANDLER_PARAMS})};
    if (!$msgHndlOut->{HANDLER}) {
	report($daemon, "err", "Error creating MSG handler: $@");
        return undef;
    }
    $msgHndlOut->{TOPIC_REGEXP} = $msgHndl->{TOPIC};
    $msgHndlOut->{TOPIC_REGEXP} =~ s/\./\\\./g;
    $msgHndlOut->{TOPIC_REGEXP} =~ s/\*/\(\[\^\.\]\)\+\?/g;

    $msgHndlOut->{TOPIC_PARAMS} = $msgHndl->{TOPIC_PARAMS} if $msgHndl->{TOPIC_PARAMS};
   
    if ($verbose) {
        my $msg = "Successfully loaded handler $msgHndl->{HANDLER} for topic $msgHndl->{TOPIC}";
        if (exists $msgHndlOut->{TOPIC_PARAMS} and ref $msgHndlOut->{TOPIC_PARAMS} eq "HASH") {
            $msg .= " with params: " . Dumper($msgHndlOut->{TOPIC_PARAMS});
        }
	report($daemon, "notice", $msg);
    }
 
    1;
}

sub loadConfig {
    my $config = shift || return undef;
    my $msgHandlers = shift;
    my $daemon = shift;
    my $verbose = shift;

    if ($config && -f $config) {
        my %options = ( -ConfigFile => $config,
                        -AllowMultiOptions => "yes", 
                        -InterPolateVars => 1, 
                        -InterPolateEnv => 1,
                        -UseApacheInclude => 1,
                        -IncludeDirectories => 1 );
        my $configRef;
        eval {
            $configRef = new Config::General(%options);
        };
        if ($@) {
	    report($daemon, "err", "Error loading config: $@");
            return undef;
        }
        my %configData = $configRef->getall;
        if ( ref $configData{MSGAdapter} eq "ARRAY" ) {
            foreach my $msgHndl (@{$configData{MSGAdapter}}) {
                $msgHandlers->{$msgHndl->{TOPIC}} = {};
                if (!loadMsgHandler($msgHndl, $msgHandlers->{$msgHndl->{TOPIC}}, $daemon, $verbose)) {
                    delete $msgHandlers->{$msgHndl->{TOPIC}};
                } 
            }
        }
    } else {
        return undef;
    }
    1;
}

my $daemon = 0;
my $pidfile = '/var/run/msg-to-queue.pid';
my $broker;
my $msgHandlers = {};
my $verbose = 0;

# set signal handlers
sub signal_handler {
    report($daemon, "notice", "Got exit signal");
    disconnect($broker, $msgHandlers, $daemon, $verbose, 1);
    if (-f $pidfile) {
        unlink ($pidfile);
    }
    closelog();
    exit 0;
}

# set signal handlers
sub signal_pipe_handler {
    report($daemon, "notice", "Got SIGPIPE signal");
    undef $broker;
}

my $dir = "/var/spool/msg-nagios-bridge/incoming";
my $dest;
my $broker_uri = undef;
my $broker_cache = '/var/cache/msg/broker-cache-file/broker-list';
my $config = '/etc/msg-to-queue/msg-to-queue.conf';

# Process Command Line
if(!GetOptions( 'dir=s'   => \$dir, 'prefix=s' => \$dest,
                'broker-uri=s' => \$broker_uri,
                'broker-cache=s' => \$broker_cache,
                'pid-file=s' => \$pidfile,
                'v' => \$verbose, 'd' => \$daemon,
                'config=s' => \$config)) {
    exit 1;
}

($broker_uri || ($broker_cache && -f $broker_cache)) or die USAGE;

if ($dest) {
    $ENV{MSG_TO_QUEUE_DESTINATION} = $dest;    
}

loadConfig($config, $msgHandlers,$daemon,$verbose);

# check if someone insists on providing put this because of the backward compatibility
if ($dir && $dest) {
    if (! exists $msgHandlers->{$dest}) {
        $msgHandlers->{$dest} = {};
        if (!loadMsgHandler(
            { TOPIC=>$dest, HANDLER=>"GridMon::MsgHandler::MetricOutput", HANDLER_PARAMS=> { SOURCE=>"local", CACHE_DIR=>$dir } },
            $msgHandlers->{$dest},
            $daemon, $verbose) ) {
            delete $msgHandlers->{$dest};
        }
    }
}

if (scalar(keys %{$msgHandlers}) < 1) {
    report($daemon, "err", "Config (--config) and arguments (--dif and --prefix) didn't provide any topic for me to listen to. Please recheck your configuration.");
    exit; 
}

my $msg_broker_param;
if (defined $broker_uri) {
    $msg_broker_param = {uri => $broker_uri};
} else {
    $msg_broker_param = {uri => "file:" . $broker_cache};
}

if ($daemon) {
    chdir '/'                  or die "Can't chdir to /: $!";
    my $pid = fork;
    if (!defined $pid) {
        die "Couldn't fork: $!\n";
    }
    if ($pid) {
        if (!open STD, ">$pidfile") {
            # shoot the child
            kill TERM => $pid;
            die "Could not write $pid to PID file\n";
        }
        print STD $pid;
        close STD;
        exit 0;
    }
    if (! setsid() ) {
        die "Couldn't start a new session: $!";
    }
    umask 0;

    openlog(PROGNAME, "pid", 'daemon') or die "Couldn't open syslog";
    close (STDOUT); close (STDIN); close (STDERR);

    syslog('notice', "Daemon ".PROGNAME." successfully started.");
}

$SIG{TERM} = \&signal_handler;
$SIG{INT}  = \&signal_handler;
$SIG{HUP}  = \&signal_handler;
$SIG{PIPE} = \&signal_pipe_handler;

while (1) {
    my $frame;
    my $body;

    if (!defined $broker) {
        $broker = connectToMSG($msg_broker_param, $msgHandlers, $daemon, $verbose);
        if (!defined $broker) {
            sleep(60);
            next;
        }
    }

    eval {
        $frame = $broker->wait_for_frames();
	$body = $frame->body();
    };
    if ($@) {
	report($daemon, "err", "Error receiving data from MSG: $@");
        # sleep for 60s and then try to reconnect
        sleep (60);
	report($daemon, "err", "Let's try to reconnect to MSG...");
        disconnect($broker, $msgHandlers, $daemon, $verbose, 0);
        undef $broker;
        next;
    }

    my $msg;
    if ($verbose) {
	report($daemon, "notice", "Got message: " . $body);
    }

    foreach my $msgHandler (values %{$msgHandlers}) {
        if ($frame->header("destination") =~ /^$msgHandler->{TOPIC_REGEXP}$/) {
            my ($retVal, $errMsg, @verbMsg) = $msgHandler->{HANDLER}->handleMessage($body, $verbose);
            if ($verbose && @verbMsg) {
                foreach my $verbMsgO (@verbMsg) {
		    report($daemon, "notice", $verbMsgO);
                }
           }
           if (!$retVal) {
                if (!$errMsg) {
                    $errMsg = "Unknown error from Message handler";    
                }
		report($daemon, "notice", $errMsg);
            }
        }
    }
}

disconnect($broker, $msgHandlers, $daemon, $verbose, 1);

if ($daemon) {
    if (-f $pidfile) {
        unlink ($pidfile);
    }
    syslog('notice', "Daemon ".PROGNAME." exiting.");
    closelog();
}

=head1 NAME

msg-to-queue - Daemon which gathers WLCG Monitoring WG compatible I<metricOutput>
messages from messaging system, translates them to Nagios passive checks and 
puts passive checks to dir based queue.

=head1 SYNOPSIS

B<msg-to-queue> --prefix I<destination prefix> [ -v ] [ -d ] [ --dir I<qdirectory> ]
  [ --broker-cache I<FILENAME> ] [ --broker-uri I<HOSTNAME> ] [ --pid-file I<HOSTNAME> ]
  [ --config I<file> ]

=head1 DESCRIPTION

B<msg-to-queue> is executed as daemon.  It reads WLCG Monitoring WG compatible 
I<metricOutput> messages from messaging system, translates them to Nagios 
passive check format messages and puts to dir based queue

If not provided, the directory defaults to
C</var/spool/nagios-msg-bridge/incoming/>.

=head1 SEE ALSO

Net::STOMP::Client(3)
GridMon::MsgCache(3)
GridMon::Nagios::Passive(3)

=cut

